// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldAround.Infrastructure.Data;

#nullable disable

namespace WorldAround.Infrastructure.Migrations
{
    [DbContext(typeof(WorldAroundDbContext))]
    [Migration("20220618171755_CREATE_many_to_many_attraction_event")]
    partial class CREATE_many_to_many_attraction_event
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Accessibility", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Accessibilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Public"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Private"
                        });
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("EventId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TripId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.AttractionEventLink", b =>
                {
                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("AttractionId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("AttractionEventLinks");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AttractionId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EventId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("ActualQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("EquipmentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("NeededQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentGroupId");

                    b.HasIndex("EventId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.EquipmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EquipmentsGroups");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessibilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Display")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AccessibilityId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int?>("AttractionId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PinId")
                        .HasColumnType("int");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("AttractionId");

                    b.HasIndex("EventId");

                    b.HasIndex("PinId");

                    b.HasIndex("TripId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Display")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ReplyMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("EventId");

                    b.HasIndex("ReplyMessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ParticipantRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantRoleId");

                    b.HasIndex("UserId", "EventId")
                        .IsUnique();

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.ParticipantPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ParticipantsPermissions");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.ParticipantPermissionLink", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ParticipantPermissionLinks");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.ParticipantRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ParticipantRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Pin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AttractionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("TripId");

                    b.ToTable("Pins");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AttractionId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EventId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.TripEventLink", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("TripId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("TripEventLinks");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldAround.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Album", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("Albums")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.Trip", "Trip")
                        .WithMany("Albums")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Attraction", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.User", "Author")
                        .WithMany("CreatedAttractions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.AttractionEventLink", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Attraction", "Attraction")
                        .WithMany("AttractionEventLinks")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("AttractionEventLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Chat", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("Chats")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Comment", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Attraction", "Attraction")
                        .WithMany("Comments")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.User", "Author")
                        .WithMany("CreatedComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.Trip", "Trip")
                        .WithMany("Comments")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attraction");

                    b.Navigation("Author");

                    b.Navigation("Event");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.EquipmentGroup", "EquipmentGroup")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("Equipments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EquipmentGroup");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.EquipmentGroup", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("EquipmentGroups")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Event", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Accessibility", "Accessibility")
                        .WithMany("Events")
                        .HasForeignKey("AccessibilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Accessibility");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Image", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Album", "Album")
                        .WithMany("Images")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.Attraction", "Attraction")
                        .WithMany("Images")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WorldAround.Domain.Entities.Pin", "Pin")
                        .WithMany("Images")
                        .HasForeignKey("PinId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.Trip", "Trip")
                        .WithMany("Images")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Album");

                    b.Navigation("Attraction");

                    b.Navigation("Event");

                    b.Navigation("Pin");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Message", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("Messages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldAround.Domain.Entities.Message", "ReplyMessage")
                        .WithMany("ReplyMessages")
                        .HasForeignKey("ReplyMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Chat");

                    b.Navigation("Event");

                    b.Navigation("ReplyMessage");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Participant", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldAround.Domain.Entities.ParticipantRole", "ParticipantRole")
                        .WithMany("Participants")
                        .HasForeignKey("ParticipantRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorldAround.Domain.Entities.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("ParticipantRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.ParticipantPermissionLink", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Participant", "Participant")
                        .WithMany("ParticipantPermissionLinks")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldAround.Domain.Entities.ParticipantPermission", "Permission")
                        .WithMany("ParticipantPermissionLinks")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Pin", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Attraction", "Attraction")
                        .WithMany("Pins")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorldAround.Domain.Entities.Trip", "Trip")
                        .WithMany("Pins")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Rating", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Attraction", "Attraction")
                        .WithMany("Ratings")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.User", "Author")
                        .WithMany("CreatedRatings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("Ratings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Domain.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attraction");

                    b.Navigation("Author");

                    b.Navigation("Event");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Trip", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.User", "Author")
                        .WithMany("CreatedTrips")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.TripEventLink", b =>
                {
                    b.HasOne("WorldAround.Domain.Entities.Event", "Event")
                        .WithMany("TripEventLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldAround.Domain.Entities.Trip", "Trip")
                        .WithMany("TripEventLinks")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Accessibility", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Album", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Attraction", b =>
                {
                    b.Navigation("AttractionEventLinks");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Pins");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.EquipmentGroup", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Event", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AttractionEventLinks");

                    b.Navigation("Chats");

                    b.Navigation("Comments");

                    b.Navigation("EquipmentGroups");

                    b.Navigation("Equipments");

                    b.Navigation("Images");

                    b.Navigation("Messages");

                    b.Navigation("Participants");

                    b.Navigation("Ratings");

                    b.Navigation("TripEventLinks");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Message", b =>
                {
                    b.Navigation("ReplyMessages");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Participant", b =>
                {
                    b.Navigation("ParticipantPermissionLinks");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.ParticipantPermission", b =>
                {
                    b.Navigation("ParticipantPermissionLinks");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.ParticipantRole", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Pin", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Pins");

                    b.Navigation("Ratings");

                    b.Navigation("TripEventLinks");
                });

            modelBuilder.Entity("WorldAround.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CreatedAttractions");

                    b.Navigation("CreatedComments");

                    b.Navigation("CreatedRatings");

                    b.Navigation("CreatedTrips");

                    b.Navigation("Participants");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
